"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[30],{1707:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-8eb80d6c",path:"/openvas/",title:"Greenbone Vulnerability Manager",lang:"en-US",frontmatter:{lang:"en-US",title:"Greenbone Vulnerability Manager",description:"OpenVAS is a full-featured vulnerability scanner. Its capabilities include unauthenticated testing, authenticated testing, various high level and low level Internet and industrial protocols, performance tuning for large-scale scans and a powerful internal programming language to implement any type of vulnerability test."},excerpt:"",headers:[{level:2,title:"Configuration files",slug:"configuration-files",children:[]},{level:2,title:"Prerequisites",slug:"prerequisites",children:[]},{level:2,title:"Install GVM 21.04 from source",slug:"install-gvm-21-04-from-source",children:[{level:3,title:"Set up GVM user define installation paths",slug:"set-up-gvm-user-define-installation-paths",children:[]},{level:3,title:"Import GVM signing key",slug:"import-gvm-signing-key",children:[]},{level:3,title:"Build GVM libraries",slug:"build-gvm-libraries",children:[]},{level:3,title:"Build the Greenbone Vulnerability Manager",slug:"build-the-greenbone-vulnerability-manager",children:[]},{level:3,title:"Build the Greenbone Security Assistant",slug:"build-the-greenbone-security-assistant",children:[]},{level:3,title:"Build the OpenVAS Samba module",slug:"build-the-openvas-samba-module",children:[]},{level:3,title:"Build the OpenVAS Scanner",slug:"build-the-openvas-scanner",children:[]},{level:3,title:"Build ospd and ospd-openvas",slug:"build-ospd-and-ospd-openvas",children:[]},{level:3,title:"Configure Redis",slug:"configure-redis",children:[]},{level:3,title:"Configure PostgreSQL database",slug:"configure-postgresql-database",children:[]},{level:3,title:"Create GVM admin",slug:"create-gvm-admin",children:[]},{level:3,title:"Update Network Vulnerability Tests",slug:"update-network-vulnerability-tests",children:[]},{level:3,title:"Update Greenbone Feed synchronisation",slug:"update-greenbone-feed-synchronisation",children:[]},{level:3,title:"Generate GVM certificates",slug:"generate-gvm-certificates",children:[]},{level:3,title:"Set up systemd",slug:"set-up-systemd",children:[]},{level:3,title:"Enable and start services",slug:"enable-and-start-services",children:[]}]},{level:2,title:"Install GVM 21.04 Atomicorp",slug:"install-gvm-21-04-atomicorp",children:[]},{level:2,title:"Running vulnerability scans",slug:"running-vulnerability-scans",children:[{level:3,title:"Unauthenticated scan",slug:"unauthenticated-scan",children:[]},{level:3,title:"Authenticated scan",slug:"authenticated-scan",children:[]}]},{level:2,title:"Two-factor authentication w/ privacyIDEA",slug:"two-factor-authentication-w-privacyidea",children:[]},{level:2,title:"Scheduled jobs",slug:"scheduled-jobs",children:[]},{level:2,title:"Troubleshooting",slug:"troubleshooting",children:[]},{level:2,title:"Enterprise solutions",slug:"enterprise-solutions",children:[{level:3,title:"The Greenbone Security Manager",slug:"the-greenbone-security-manager",children:[]}]}],filePathRelative:"openvas/README.md",git:{updatedTime:1633980683e3,contributors:[{name:"Libellux",email:"fredrik@libellux.com",commits:103}]}}},7300:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Mt});var e=a(6252);const t={id:"greenbone-vulnerability-manager",tabindex:"-1"},l=(0,e._)("a",{class:"header-anchor",href:"#greenbone-vulnerability-manager","aria-hidden":"true"},"#",-1),o=(0,e.Uk)(" Greenbone Vulnerability Manager "),r=(0,e._)("p",null,"OpenVAS is a full-featured vulnerability scanner. Its capabilities include unauthenticated testing, authenticated testing, various high level and low level Internet and industrial protocols, performance tuning for large-scale scans and a powerful internal programming language to implement any type of vulnerability test.",-1),c={href:"https://www.greenbone.net/en/vulnerability-management/",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("GVM website"),p=(0,e.Uk)(),u={href:"https://www.openvas.org/",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("OpenVAS website"),d=(0,e.Uk)(),_={href:"https://github.com/greenbone",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("GitHub"),b=(0,e.Uk)(),m={href:"https://greenbone.github.io/docs/",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("GVM official docs"),v=(0,e._)("p",null,"Setup and configuration have been tested on the following operating systems:",-1),U=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,"How-to build GVM on Rocky 8.4 from source will be added in upcoming release.")],-1),f=(0,e._)("li",null,"Ubuntu- 16.04, 18.04, 20.04 (Focal Fossa)",-1),y=(0,e.Uk)("GVM 20.08 for Debian 10 visit "),S={href:"https://sadsloth.net/post/install-gvm-20_08-src-on-debian/",target:"_blank",rel:"noopener noreferrer"},R=(0,e.Uk)("sadsloth.net"),w=(0,e.Uk)("."),E=(0,e._)("li",null,"GVM- 20.08, 20.08.1, 21.04, 21.4.2, 21.4.3, Atomicorp 21.04 (Redhat 8, CentOS 8, Fedora 32, Fedora 34)",-1),I={href:"https://ko-fi.com/B0B31BJU3",target:"_blank",rel:"noopener noreferrer"},x=(0,e._)("img",{src:"https://www.ko-fi.com/img/githubbutton_sm.svg",alt:"ko-fi"},null,-1),$=(0,e._)("h2",{id:"configuration-files",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#configuration-files","aria-hidden":"true"},"#"),(0,e.Uk)(" Configuration files")],-1),A=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,'The lines in the "scripts" below has been used for testing and successfully configure GVM 21.04 (21.4.3). You may use the testing guide to install GVM or follow our detailed step-by-step tutorial below to install GVM 21.04.')],-1),D={href:"https://github.com/libellux/Libellux-Up-and-Running/blob/master/docs/openvas/config/ubuntu_21.4.3.sh",target:"_blank",rel:"noopener noreferrer"},O=(0,e.Uk)("GVM 21.4.3"),V=(0,e._)("h2",{id:"prerequisites",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#prerequisites","aria-hidden":"true"},"#"),(0,e.Uk)(" Prerequisites")],-1),N=(0,e.Uk)("Dependencies required to install GVM 21.04 (21.4.3) from source. For more detailed information regarding dependencies and their function please visit "),G={href:"https://greenbone.github.io/docs/",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("GVM official docs"),C=(0,e.Uk)(" website."),L=(0,e.uE)('<details class="custom-container details"><summary>Dependencies for Ubuntu 20.04</summary><div class="language-text ext-text"><pre class="language-text"><code>build-essential cmake pkg-config gcc-mingw-w64 gnutls-bin\nlibgnutls28-dev libxml2-dev libssh-dev libssl-dev libunistring-dev\nlibldap2-dev libgcrypt-dev libpcap-dev libgpgme-dev libradcli-dev libglib2.0-dev\nlibksba-dev libical-dev libpq-dev libopenvas-dev libpopt-dev libnet1-dev\nlibmicrohttpd-dev redis-server libhiredis-dev doxygen xsltproc uuid-dev\ngraphviz bison postgresql postgresql-contrib postgresql-server-dev-all\nheimdal-dev xmltoman nmap npm nodejs virtualenv gnupg rsync yarnpkg\npython3-paramiko python3-lxml python3-defusedxml python3-pip python3-psutil\npython3-setuptools python3-packaging python3-wrapt python3-cffi python3-redis\nxmlstarlet texlive-fonts-recommended texlive-latex-extra perl-base\n</code></pre></div></details><h2 id="install-gvm-21-04-from-source" tabindex="-1"><a class="header-anchor" href="#install-gvm-21-04-from-source" aria-hidden="true">#</a> Install GVM 21.04 from source</h2><p>Begin to install the dependencies for GVM 21.04 (21.4.3).</p>',3),M=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"apt-get"),(0,e.Uk)(" update "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"apt-get"),(0,e.Uk)(" -y upgrade "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"apt-get"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(" -y build-essential "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"apt-get"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(" -y cmake pkg-config gcc-mingw-w64 "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngnutls-bin libgnutls28-dev libxml2-dev libssh-dev libssl-dev libunistring-dev "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\nlibldap2-dev libgcrypt-dev libpcap-dev libgpgme-dev libradcli-dev libglib2.0-dev "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\nlibksba-dev libical-dev libpq-dev libopenvas-dev libpopt-dev libnet1-dev "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\nlibmicrohttpd-dev redis-server libhiredis-dev doxygen xsltproc uuid-dev "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngraphviz bison postgresql postgresql-contrib postgresql-server-dev-all "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\nheimdal-dev xmltoman nmap "),(0,e._)("span",{class:"token function"},"npm"),(0,e.Uk)(" nodejs virtualenv gnupg "),(0,e._)("span",{class:"token function"},"rsync"),(0,e.Uk)(" yarnpkg "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\npython3-paramiko python3-lxml python3-defusedxml python3-pip python3-psutil "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\npython3-setuptools python3-packaging python3-wrapt python3-cffi python3-redis "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\nxmlstarlet texlive-fonts-recommended texlive-latex-extra perl-base\n")])])],-1),T=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),P=(0,e._)("p",null,"Continue to install yarn using npm.",-1),B=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"npm"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(" -g "),(0,e._)("span",{class:"token function"},"yarn"),(0,e.Uk)("\n")])])],-1),z=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),F=(0,e._)("h3",{id:"set-up-gvm-user-define-installation-paths",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#set-up-gvm-user-define-installation-paths","aria-hidden":"true"},"#"),(0,e.Uk)(" Set up GVM user define installation paths")],-1),q=(0,e._)("p",null,[(0,e.Uk)("Create the GVM user and add it to sudoers group without login. Also add your current sudo user to the GVM group so you're allowed to run "),(0,e._)("em",null,"gvmd"),(0,e.Uk)(".")],-1),Y=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"useradd"),(0,e.Uk)(" -r -M -U -G "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" -s /usr/sbin/nologin gvm "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"usermod"),(0,e.Uk)(" -aG gvm "),(0,e._)("span",{class:"token environment constant"},"$USER"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"su"),(0,e.Uk)(),(0,e._)("span",{class:"token environment constant"},"$USER"),(0,e.Uk)("\n")])])],-1),K=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),H=(0,e._)("p",null,"Next define base, source, build and installation directories.",-1),X=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},[(0,e._)("span",{class:"token environment constant"},"PATH")]),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token environment constant"},"$PATH"),(0,e.Uk)(":/usr/local/sbin "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"INSTALL_PREFIX"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/usr/local "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"SOURCE_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token environment constant"},"$HOME"),(0,e.Uk)("/source "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"mkdir"),(0,e.Uk)(" -p "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"BUILD_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token environment constant"},"$HOME"),(0,e.Uk)("/build "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"mkdir"),(0,e.Uk)(" -p "),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"INSTALL_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token environment constant"},"$HOME"),(0,e.Uk)("/install "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"mkdir"),(0,e.Uk)(" -p "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("\n")])])],-1),j=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Q=(0,e._)("h3",{id:"import-gvm-signing-key",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#import-gvm-signing-key","aria-hidden":"true"},"#"),(0,e.Uk)(" Import GVM signing key")],-1),J=(0,e._)("p",null,"Download the signing key from Greenbone community to validate the integrity of the source files.",-1),Z=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -O https://www.greenbone.net/GBCommunitySigningKey.asc "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngpg --import GBCommunitySigningKey.asc\n")])])],-1),nn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),sn=(0,e._)("p",null,"Edit GVM signing key to trust ultimately",-1),an=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@ubuntu:~$ gpg --edit-key 9823FAA60ED1E580\n")])],-1),en=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),tn=(0,e.uE)('<p>When you get prompted type <em>trust</em> and select option 5 (I trust ultimately).</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg <span class="token punctuation">(</span>GnuPG<span class="token punctuation">)</span> <span class="token number">2.2</span>.19<span class="token punctuation">;</span> Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2019</span> Free Software Foundation, Inc.\nThis is <span class="token function">free</span> software: you are <span class="token function">free</span> to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\npub  rsa4096/9823FAA60ED1E580\n     created: <span class="token number">2017</span>-09-06  expires: never       usage: SC\n     trust: unknown       validity: unknown\n<span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>. Greenbone Community Feed integrity key\n\ngpg<span class="token operator">&gt;</span> trust\npub  rsa4096/9823FAA60ED1E580\n     created: <span class="token number">2017</span>-09-06  expires: never       usage: SC\n     trust: unknown       validity: unknown\n<span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>. Greenbone Community Feed integrity key\n\nPlease decide how far you trust this user to correctly verify other <span class="token function">users</span><span class="token string">&#39; keys\n(by looking at passports, checking fingerprints from different sources, etc.)\n\n  1 = I don&#39;</span>t know or won&#39;t say\n  <span class="token number">2</span> <span class="token operator">=</span> I <span class="token keyword">do</span> NOT trust\n  <span class="token number">3</span> <span class="token operator">=</span> I trust marginally\n  <span class="token number">4</span> <span class="token operator">=</span> I trust fully\n  <span class="token number">5</span> <span class="token operator">=</span> I trust ultimately\n  m <span class="token operator">=</span> back to the main menu\n\nYour decision? <span class="token number">5</span>\nDo you really want to <span class="token builtin class-name">set</span> this key to ultimate trust? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> y\n\npub  rsa4096/9823FAA60ED1E580\n     created: <span class="token number">2017</span>-09-06  expires: never       usage: SC\n     trust: ultimate      validity: unknown\n<span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>. Greenbone Community Feed integrity key\nPlease note that the shown key validity is not necessarily correct\nunless you restart the program.\n\ngpg<span class="token operator">&gt;</span> quit\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br></div></div><h3 id="build-gvm-libraries" tabindex="-1"><a class="header-anchor" href="#build-gvm-libraries" aria-hidden="true">#</a> Build GVM libraries</h3>',3),ln=(0,e.Uk)("Download and build the "),on={href:"https://github.com/greenbone/gvm-libs",target:"_blank",rel:"noopener noreferrer"},rn=(0,e.Uk)("GVM libraries"),cn=(0,e.Uk)(" version 21.04 (21.4.3). Set the GVM libraries to same version as GVM."),pn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"GVM_VERSION"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"21.4"),(0,e.Uk)(".3 "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"GVM_LIBS_VERSION"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$GVM_VERSION"),(0,e.Uk)("\n")])])],-1),un=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),kn=(0,e._)("p",null,"Download and verify the specified GVM libraries.",-1),dn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/gvm-libs/archive/refs/tags/v"),(0,e._)("span",{class:"token variable"},"$GVM_LIBS_VERSION"),(0,e.Uk)(".tar.gz -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvm-libs-"),(0,e._)("span",{class:"token variable"},"$GVM_LIBS_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/gvm-libs/releases/download/v"),(0,e._)("span",{class:"token variable"},"$GVM_LIBS_VERSION"),(0,e.Uk)("/gvm-libs-"),(0,e._)("span",{class:"token variable"},"$GVM_LIBS_VERSION"),(0,e.Uk)(".tar.gz.asc -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvm-libs-"),(0,e._)("span",{class:"token variable"},"$GVM_LIBS_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngpg --verify "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvm-libs-"),(0,e._)("span",{class:"token variable"},"$GVM_LIBS_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvm-libs-"),(0,e._)("span",{class:"token variable"},"$GVM_LIBS_VERSION"),(0,e.Uk)(".tar.gz\n")])])],-1),_n=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),gn=(0,e.uE)('<p>Make sure the output says that the signature from Greenbone Community Feed is good.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Tue 03 Aug <span class="token number">2021</span> <span class="token number">12</span>:11:44 PM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: checking the trustdb\ngpg: marginals needed: <span class="token number">3</span>  completes needed: <span class="token number">1</span>  trust model: pgp\ngpg: depth: <span class="token number">0</span>  valid:   <span class="token number">1</span>  signed:   <span class="token number">0</span>  trust: <span class="token number">0</span>-, 0q, 0n, 0m, 0f, 1u\ngpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div></div></div><p>Once you&#39;ve confirmed that the signature is good proceed to install GVM libraries.</p>',3),bn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"tar"),(0,e.Uk)(" -C "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)(" -xvzf "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvm-libs-"),(0,e._)("span",{class:"token variable"},"$GVM_LIBS_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"mkdir"),(0,e.Uk)(" -p "),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gvm-libs "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"cd"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gvm-libs "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ncmake "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvm-libs-"),(0,e._)("span",{class:"token variable"},"$GVM_LIBS_VERSION"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_INSTALL_PREFIX"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_PREFIX"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_BUILD_TYPE"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("Release "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DSYSCONFDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/etc "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DLOCALSTATEDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/var "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DGVM_PID_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/run/gvm "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"make"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"DESTDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(" -rv "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/* / "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"rm"),(0,e.Uk)(" -rf "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/*\n")])])],-1),mn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),hn=(0,e._)("h3",{id:"build-the-greenbone-vulnerability-manager",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#build-the-greenbone-vulnerability-manager","aria-hidden":"true"},"#"),(0,e.Uk)(" Build the Greenbone Vulnerability Manager")],-1),vn=(0,e.Uk)("Next download, verify and build the "),Un={href:"https://github.com/greenbone/gvmd",target:"_blank",rel:"noopener noreferrer"},fn=(0,e.Uk)("Greenbone Vulnerability Manager (GVM)"),yn=(0,e.Uk)(" version 21.04 (21.4.3). Set the GVMD version to the latest realese 21.4.3."),Sn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"GVMD_VERSION"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"21.4"),(0,e.Uk)(".3 "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/gvmd/archive/refs/tags/v"),(0,e._)("span",{class:"token variable"},"$GVMD_VERSION"),(0,e.Uk)(".tar.gz -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvmd-"),(0,e._)("span",{class:"token variable"},"$GVMD_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/gvmd/releases/download/v"),(0,e._)("span",{class:"token variable"},"$GVMD_VERSION"),(0,e.Uk)("/gvmd-"),(0,e._)("span",{class:"token variable"},"$GVMD_VERSION"),(0,e.Uk)(".tar.gz.asc -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvmd-"),(0,e._)("span",{class:"token variable"},"$GVMD_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngpg --verify "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvmd-"),(0,e._)("span",{class:"token variable"},"$GVMD_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvmd-"),(0,e._)("span",{class:"token variable"},"$GVMD_VERSION"),(0,e.Uk)(".tar.gz\n")])])],-1),Rn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),wn=(0,e.uE)('<p>Make sure the signature from Greenbone Community Feed is good.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Tue 03 Aug <span class="token number">2021</span> 02:28:53 PM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div></div></div><p>Extract the downloaded GVMD file and proceed with the installation.</p>',3),En=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"tar"),(0,e.Uk)(" -C "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)(" -xvzf "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvmd-"),(0,e._)("span",{class:"token variable"},"$GVMD_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"mkdir"),(0,e.Uk)(" -p "),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gvmd "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"cd"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gvmd "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ncmake "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gvmd-"),(0,e._)("span",{class:"token variable"},"$GVMD_VERSION"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_INSTALL_PREFIX"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_PREFIX"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_BUILD_TYPE"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("Release "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DLOCALSTATEDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/var "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DSYSCONFDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/etc "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DGVM_DATA_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/var "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DGVM_RUN_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/run/gvm "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DOPENVAS_DEFAULT_SOCKET"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/run/ospd/ospd-openvas.sock "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DGVM_FEED_LOCK_PATH"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/var/lib/gvm/feed-update.lock "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DSYSTEMD_SERVICE_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/lib/systemd/system "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DDEFAULT_CONFIG_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/etc/default "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DLOGROTATE_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/etc/logrotate.d "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"make"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"DESTDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(" -rv "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/* / "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"rm"),(0,e.Uk)(" -rf "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/*\n")])])],-1),In=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),xn=(0,e._)("h3",{id:"build-the-greenbone-security-assistant",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#build-the-greenbone-security-assistant","aria-hidden":"true"},"#"),(0,e.Uk)(" Build the Greenbone Security Assistant")],-1),$n=(0,e.Uk)("Proceed to download and build the "),An={href:"https://github.com/greenbone/gsa",target:"_blank",rel:"noopener noreferrer"},Dn=(0,e.Uk)("Greenbone Security Assistant (GSA)"),On=(0,e.Uk)(" version 21.04 (21.4.2) and its node modules."),Vn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"GSA_VERSION"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"21.4"),(0,e.Uk)(".2 "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/gsa/archive/refs/tags/v"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/gsa/releases/download/v"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)("/gsa-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz.asc -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/gsa/releases/download/v"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)("/gsa-node-modules-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-node-modules-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/gsa/releases/download/v"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)("/gsa-node-modules-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz.asc -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-node-modules-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngpg --verify "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngpg --verify "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-node-modules-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-node-modules-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz\n")])])],-1),Nn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Gn=(0,e.uE)('<p>Once complete verify the GSA downloads and make sure the signature from Greenbone Community Feed is good.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Tue 03 Aug <span class="token number">2021</span> 02:59:15 PM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>\ngpg: Signature made Tue 03 Aug <span class="token number">2021</span> 02:54:19 PM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div></div></div><p>Proceed with the installation of GSA.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>This may take a while.</p></div>',4),Wn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"tar"),(0,e.Uk)(" -C "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)(" -xvzf "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"tar"),(0,e.Uk)(" -C "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)("/gsa -xvzf "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-node-modules-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"mkdir"),(0,e.Uk)(" -p "),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gsa "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"cd"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gsa "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ncmake "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/gsa-"),(0,e._)("span",{class:"token variable"},"$GSA_VERSION"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_INSTALL_PREFIX"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_PREFIX"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_BUILD_TYPE"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("Release "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DSYSCONFDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/etc "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DLOCALSTATEDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/var "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DGVM_RUN_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/run/gvm "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DGSAD_PID_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/run/gvm "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DLOGROTATE_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/etc/logrotate.d "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"make"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"DESTDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(" -rv "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/* / "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"rm"),(0,e.Uk)(" -rf "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/*\n")])])],-1),Cn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Ln=(0,e._)("h3",{id:"build-the-openvas-samba-module",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#build-the-openvas-samba-module","aria-hidden":"true"},"#"),(0,e.Uk)(" Build the OpenVAS Samba module")],-1),Mn=(0,e.Uk)("Download and build the "),Tn={href:"https://github.com/greenbone/openvas-smb",target:"_blank",rel:"noopener noreferrer"},Pn=(0,e.Uk)("OpenVAS SMB module"),Bn=(0,e.Uk)(" version 21.04."),zn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"OPENVAS_SMB_VERSION"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"21.4"),(0,e.Uk)(".0 "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/openvas-smb/archive/refs/tags/v"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),(0,e.Uk)(".tar.gz -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-smb-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/openvas-smb/releases/download/v"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),(0,e.Uk)("/openvas-smb-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),(0,e.Uk)(".tar.gz.asc -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-smb-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngpg --verify "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-smb-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-smb-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),(0,e.Uk)(".tar.gz\n")])])],-1),Fn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),qn=(0,e.uE)('<p>Verify the SMB module download and make sure the signature from Greenbone Community Feed is trusted.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Fri <span class="token number">25</span> Jun <span class="token number">2021</span> 06:36:43 AM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div></div></div><p>Next extract files and proceed with the installation.</p>',3),Yn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"tar"),(0,e.Uk)(" -C "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)(" -xvzf "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-smb-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"mkdir"),(0,e.Uk)(" -p "),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/openvas-smb "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"cd"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/openvas-smb "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ncmake "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-smb-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_INSTALL_PREFIX"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_PREFIX"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_BUILD_TYPE"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("Release "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"make"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"DESTDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(" -rv "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/* / "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"rm"),(0,e.Uk)(" -rf "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/*\n")])])],-1),Kn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Hn=(0,e._)("h3",{id:"build-the-openvas-scanner",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#build-the-openvas-scanner","aria-hidden":"true"},"#"),(0,e.Uk)(" Build the OpenVAS Scanner")],-1),Xn=(0,e.Uk)("Download and build the "),jn={href:"https://github.com/greenbone/openvas",target:"_blank",rel:"noopener noreferrer"},Qn=(0,e.Uk)("openvas-scanner (OpenVAS)"),Jn=(0,e.Uk)(" version 21.04 (21.4.1)."),Zn=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"OSPD_VERSION"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"21.4"),(0,e.Uk)(".1 "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"OSPD_OPENVAS_VERSION"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"21.4"),(0,e.Uk)(".2 "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/openvas-scanner/archive/refs/tags/v"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),(0,e.Uk)(".tar.gz -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-scanner-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/openvas-scanner/releases/download/v"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),(0,e.Uk)("/openvas-scanner-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),(0,e.Uk)(".tar.gz.asc -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-scanner-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngpg --verify "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-scanner-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-scanner-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),(0,e.Uk)(".tar.gz\n")])])],-1),ns=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),ss=(0,e.uE)('<p>Verify the signature output.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Tue 03 Aug <span class="token number">2021</span> <span class="token number">12</span>:59:52 PM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div></div></div>',2),as=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"tar"),(0,e.Uk)(" -C "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)(" -xvzf "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-scanner-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"mkdir"),(0,e.Uk)(" -p "),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/openvas-scanner "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"cd"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/openvas-scanner "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ncmake "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-scanner-"),(0,e._)("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_INSTALL_PREFIX"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_PREFIX"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DCMAKE_BUILD_TYPE"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("Release "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DSYSCONFDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/etc "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DLOCALSTATEDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/var "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DOPENVAS_FEED_LOCK_PATH"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/var/lib/openvas/feed-update.lock "),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n  -DOPENVAS_RUN_DIR"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("/run/ospd "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"make"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"DESTDIR"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(" -rv "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/* / "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"rm"),(0,e.Uk)(" -rf "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/*\n")])])],-1),es=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),ts=(0,e._)("h3",{id:"build-ospd-and-ospd-openvas",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#build-ospd-and-ospd-openvas","aria-hidden":"true"},"#"),(0,e.Uk)(" Build ospd and ospd-openvas")],-1),ls=(0,e.Uk)("Proceed to download "),os={href:"https://github.com/greenbone/ospd",target:"_blank",rel:"noopener noreferrer"},rs=(0,e.Uk)("ospd"),cs=(0,e.Uk)("."),is=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"OSPD_VERSION"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"21.4"),(0,e.Uk)(".1 "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"export"),(0,e.Uk)(),(0,e._)("span",{class:"token assign-left variable"},"OSPD_OPENVAS_VERSION"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token number"},"21.4"),(0,e.Uk)(".2 "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/ospd/archive/refs/tags/v"),(0,e._)("span",{class:"token variable"},"$OSPD_VERSION"),(0,e.Uk)(".tar.gz -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-"),(0,e._)("span",{class:"token variable"},"$OSPD_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/ospd/releases/download/v"),(0,e._)("span",{class:"token variable"},"$OSPD_VERSION"),(0,e.Uk)("/ospd-"),(0,e._)("span",{class:"token variable"},"$OSPD_VERSION"),(0,e.Uk)(".tar.gz.asc -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-"),(0,e._)("span",{class:"token variable"},"$OSPD_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/ospd-openvas/archive/refs/tags/v"),(0,e._)("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),(0,e.Uk)(".tar.gz -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-openvas-"),(0,e._)("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"curl"),(0,e.Uk)(" -f -L https://github.com/greenbone/ospd-openvas/releases/download/v"),(0,e._)("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),(0,e.Uk)("/ospd-openvas-"),(0,e._)("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),(0,e.Uk)(".tar.gz.asc -o "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-openvas-"),(0,e._)("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngpg --verify "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-"),(0,e._)("span",{class:"token variable"},"$OSPD_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-"),(0,e._)("span",{class:"token variable"},"$OSPD_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\ngpg --verify "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-openvas-"),(0,e._)("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),(0,e.Uk)(".tar.gz.asc "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-openvas-"),(0,e._)("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),(0,e.Uk)(".tar.gz\n")])])],-1),ps=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),us=(0,e.uE)('<p>Verify signature for both files.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Wed 04 Aug <span class="token number">2021</span> 07:13:45 AM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>\ngpg: Signature made Wed 04 Aug <span class="token number">2021</span> <span class="token number">12</span>:23:19 PM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div></div></div><p>Extract files and start the installation.</p>',3),ks=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"tar"),(0,e.Uk)(" -C "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)(" -xvzf "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-"),(0,e._)("span",{class:"token variable"},"$OSPD_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"tar"),(0,e.Uk)(" -C "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)(" -xvzf "),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-openvas-"),(0,e._)("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),(0,e.Uk)(".tar.gz "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token builtin class-name"},"cd"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-"),(0,e._)("span",{class:"token variable"},"$OSPD_VERSION"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\npython3 -m pip "),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"."),(0,e.Uk)(" --prefix"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_PREFIX"),(0,e.Uk)(" --root"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("\n")])])],-1),ds=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),_s=(0,e._)("p",null,[(0,e.Uk)("Before you're done upgrade "),(0,e._)("code",null,"python3-psutil"),(0,e.Uk)(" to version 5.7.2 then proceed to finialize the installation of ospd-openvas and install "),(0,e._)("code",null,"gvm-tools"),(0,e.Uk)(".")],-1),gs=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ pip "),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(" --upgrade "),(0,e._)("span",{class:"token assign-left variable"},"psutil"),(0,e._)("span",{class:"token operator"},"=="),(0,e._)("span",{class:"token number"},"5.7"),(0,e.Uk)(".2 "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token builtin class-name"},"cd"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/ospd-openvas-"),(0,e._)("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\npython3 -m pip "),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(),(0,e._)("span",{class:"token builtin class-name"},"."),(0,e.Uk)(" --prefix"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_PREFIX"),(0,e.Uk)(" --root"),(0,e._)("span",{class:"token operator"},"="),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)(" --no-warn-script-location "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\npython3 -m pip "),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(" --user gvm-tools "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(" -rv "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/* / "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"rm"),(0,e.Uk)(" -rf "),(0,e._)("span",{class:"token variable"},"$INSTALL_DIR"),(0,e.Uk)("/*\n")])])],-1),bs=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),ms=(0,e._)("h3",{id:"configure-redis",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#configure-redis","aria-hidden":"true"},"#"),(0,e.Uk)(" Configure Redis")],-1),hs=(0,e._)("p",null,"Next configure redis for the default GVM installation.",-1),vs=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$SOURCE_DIR"),(0,e.Uk)("/openvas-scanner-"),(0,e._)("span",{class:"token variable"},"$GVM_VERSION"),(0,e.Uk)("/config/redis-openvas.conf /etc/redis/ "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chown"),(0,e.Uk)(" redis:redis /etc/redis/redis-openvas.conf "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token builtin class-name"},"echo"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},'"db_address = /run/redis-openvas/redis.sock"'),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"|"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"tee"),(0,e.Uk)(" -a /etc/openvas/openvas.conf\n")])])],-1),Us=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),fs=(0,e._)("p",null,"Start the redis server and enable it as an start up service.",-1),ys=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl start redis-server@openvas.service "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl "),(0,e._)("span",{class:"token builtin class-name"},"enable"),(0,e.Uk)(" redis-server@openvas.service\n")])])],-1),Ss=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Rs=(0,e._)("p",null,"Add redis to the GVM group and set up correct permissions.",-1),ws=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"usermod"),(0,e.Uk)(" -aG redis gvm "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chown"),(0,e.Uk)(" -R gvm:gvm /var/lib/gvm "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chown"),(0,e.Uk)(" -R gvm:gvm /var/lib/openvas "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chown"),(0,e.Uk)(" -R gvm:gvm /var/log/gvm "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chown"),(0,e.Uk)(" -R gvm:gvm /run/gvm "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chmod"),(0,e.Uk)(" -R g+srw /var/lib/gvm "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chmod"),(0,e.Uk)(" -R g+srw /var/lib/openvas "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chmod"),(0,e.Uk)(" -R g+srw /var/log/gvm "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chown"),(0,e.Uk)(" gvm:gvm /usr/local/sbin/gvmd "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chmod"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"6750"),(0,e.Uk)(" /usr/local/sbin/gvmd\n")])])],-1),Es=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Is=(0,e._)("p",null,"You also need to adjust the permissions for the feed synchronization.",-1),xs=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chown"),(0,e.Uk)(" gvm:gvm /usr/local/bin/greenbone-nvt-sync "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chmod"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"740"),(0,e.Uk)(" /usr/local/sbin/greenbone-feed-sync "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chown"),(0,e.Uk)(" gvm:gvm /usr/local/sbin/greenbone-*-sync "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"\\"),(0,e.Uk)("\n"),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"chmod"),(0,e.Uk)(),(0,e._)("span",{class:"token number"},"740"),(0,e.Uk)(" /usr/local/sbin/greenbone-*-sync\n")])])],-1),$s=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),As=(0,e._)("p",null,"OpenVAS will be launched from an ospd-openvas process. Update the secure path in the sudoers file accordingly.",-1),Ds=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" visudo\n")])])],-1),Os=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Vs=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Allow members of group sudo to execute any command</span>\n%sudo   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL\n\n<span class="token comment"># allow users of the gvm group run openvas</span>\n%gvm ALL <span class="token operator">=</span> NOPASSWD: /usr/local/sbin/openvas\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="configure-postgresql-database" tabindex="-1"><a class="header-anchor" href="#configure-postgresql-database" aria-hidden="true">#</a> Configure PostgreSQL database</h3>',2),Ns=(0,e.Uk)("For additional information see reference greenbone/gvmd "),Gs={href:"https://github.com/greenbone/gvmd/blob/master/INSTALL.md",target:"_blank",rel:"noopener noreferrer"},Ws=(0,e.Uk)("INSTALL.md"),Cs=(0,e.Uk)(". First make sure that the required dependencies have been installed (see "),Ls=(0,e._)("a",{href:"#prerequisites"},"Prerequisites",-1),Ms=(0,e.Uk)("). Proceed to create a Postgres user and database."),Ts=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" -u postgres "),(0,e._)("span",{class:"token function"},"bash"),(0,e.Uk)("\npostgres@ubuntu:~$ createuser -DRS gvm "),(0,e._)("span",{class:"token operator"},"&&"),(0,e.Uk)(" createdb -O gvm gvmd\npostgres@ubuntu:~$ psql gvmd\n")])])],-1),Ps=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Bs=(0,e.uE)('<p>Setup correct permissions and create database extensions.</p><div class="language-plsql ext-plsql"><pre class="language-plsql"><code>gvmd<span class="token operator">=</span># <span class="token keyword">create</span> role dba <span class="token keyword">with</span> superuser noinherit<span class="token punctuation">;</span>\ngvmd<span class="token operator">=</span># <span class="token keyword">grant</span> dba <span class="token keyword">to</span> gvm<span class="token punctuation">;</span>\ngvmd<span class="token operator">=</span># <span class="token keyword">create</span> extension <span class="token string">&quot;uuid-ossp&quot;</span><span class="token punctuation">;</span>\ngvmd<span class="token operator">=</span># <span class="token keyword">create</span> extension <span class="token string">&quot;pgcrypto&quot;</span><span class="token punctuation">;</span>\ngvmd<span class="token operator">=</span># <span class="token keyword">exit</span>\n</code></pre></div><h3 id="create-gvm-admin" tabindex="-1"><a class="header-anchor" href="#create-gvm-admin" aria-hidden="true">#</a> Create GVM admin</h3><p>Create the GVM administration user. Do not forget to change the password later.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Do not use special characters in the password.</p></div><p>Before you create the administrator make sure you did exit the postgres session and reload the dynamic loader cache.</p>',6),zs=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("postgres@ubuntu:~$ "),(0,e._)("span",{class:"token builtin class-name"},"exit"),(0,e.Uk)("\nserver@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" ldconfig\n")])])],-1),Fs=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),qs=(0,e._)("p",null,"Once you've reloaded the dynamic loader cache proceed with the user creation.",-1),Ys=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" /usr/local/sbin/gvmd --create-user"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("admin --password"),(0,e._)("span",{class:"token operator"},"="),(0,e.Uk)("admin\nUser created.\n")])])],-1),Ks=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Hs=(0,e._)("p",null,"Next lets retrieve the administrators uuid.",-1),Xs=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" gvmd --get-users --verbose\nadmin 0279ba6c-391a-472f-8cbd-1f6eb808823b\n")])]),(0,e._)("div",{class:"highlight-lines"},[(0,e._)("br"),(0,e._)("div",{class:"highlight-line"}," ")])],-1),js=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Qs=(0,e._)("p",null,"Use the administration uuid and modify the gvmd settings. Remember to put your uuid as the value option.",-1),Js=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" gvmd --modify-setting 78eceaec-3385-11ea-b237-28d24461215b --value UUID_HERE\n")])])],-1),Zs=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),na=(0,e._)("h3",{id:"update-network-vulnerability-tests",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#update-network-vulnerability-tests","aria-hidden":"true"},"#"),(0,e.Uk)(" Update Network Vulnerability Tests")],-1),sa=(0,e._)("p",null,"Update Network Vulnerability Tests (NVT) from Greenbone Community Feed.",-1),aa=(0,e._)("div",{class:"custom-container warning"},[(0,e._)("p",{class:"custom-container-title"},"WARNING"),(0,e._)("p",null,"This may take a while.")],-1),ea=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" -u gvm greenbone-nvt-sync\n")])])],-1),ta=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),la=(0,e._)("h3",{id:"update-greenbone-feed-synchronisation",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#update-greenbone-feed-synchronisation","aria-hidden":"true"},"#"),(0,e.Uk)(" Update Greenbone Feed synchronisation")],-1),oa=(0,e._)("p",null,"Update the Greenbone feed synchronisation one at the time.",-1),ra=(0,e._)("div",{class:"custom-container warning"},[(0,e._)("p",{class:"custom-container-title"},"WARNING"),(0,e._)("p",null,"Only one sync per time, otherwise the source ip will be temporarily blocked.")],-1),ca=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" -u gvm greenbone-feed-sync --type GVMD_DATA\nserver@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" -u gvm greenbone-feed-sync --type SCAP\nserver@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" -u gvm greenbone-feed-sync --type CERT\n")])])],-1),ia=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),pa=(0,e._)("h3",{id:"generate-gvm-certificates",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#generate-gvm-certificates","aria-hidden":"true"},"#"),(0,e.Uk)(" Generate GVM certificates")],-1),ua=(0,e._)("p",null,"Once you've finished the feed synchronisation generate GVM certificates.",-1),ka=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" -u gvm gvm-manage-certs -a\n")])])],-1),da=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),_a=(0,e._)("h3",{id:"set-up-systemd",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#set-up-systemd","aria-hidden":"true"},"#"),(0,e.Uk)(" Set up systemd")],-1),ga=(0,e._)("p",null,"Next setup the startup scripts. First configure the Greenbone Manager startup script.",-1),ba=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e._)("span",{class:"token function"},"cat"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"<<"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},[(0,e.Uk)("EOF"),(0,e._)("span",{class:"token bash punctuation"},[(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gvmd.service")]),(0,e.Uk)("\n[Unit]\nDescription=Greenbone Vulnerability Manager daemon (gvmd)\nAfter=network.target networking.service postgresql.service ospd-openvas.service\nWants=postgresql.service ospd-openvas.service\nDocumentation=man:gvmd(8)\nConditionKernelCommandLine=!recovery\n\n[Service]\nType=forking\nUser=gvm\nGroup=gvm\nPIDFile=/run/gvm/gvmd.pid\nRuntimeDirectory=gvm\nRuntimeDirectoryMode=2775\nExecStart=/usr/local/sbin/gvmd --osp-vt-update=/run/ospd/ospd-openvas.sock --listen-group=gvm\nRestart=always\nTimeoutStopSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF")]),(0,e.Uk)("\n")])])],-1),ma=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),ha=(0,e._)("p",null,"Copy the startup script from the build folder to your system manager directory.",-1),va=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gvmd.service /etc/systemd/system/\n")])])],-1),Ua=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),fa=(0,e._)("p",null,"Once the first startup script is saved proceed to create the script for the Greenbone Security Assistant (GSA). Remember to define your IP address for GSA.",-1),ya=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e._)("span",{class:"token function"},"cat"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"<<"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},[(0,e.Uk)("EOF"),(0,e._)("span",{class:"token bash punctuation"},[(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gsad.service")]),(0,e.Uk)("\n[Unit]\nDescription=Greenbone Security Assistant daemon (gsad)\nDocumentation=man:gsad(8) https://www.greenbone.net\nAfter=network.target gvmd.service\nWants=gvmd.service\n\n[Service]\nType=forking\nUser=gvm\nGroup=gvm\nPIDFile=/run/gvm/gsad.pid\nExecStart=/usr/local/sbin/gsad --listen=192.168.0.1 --port=9392\nRestart=always\nTimeoutStopSec=10\n\n[Install]\nWantedBy=multi-user.target\nAlias=greenbone-security-assistant.service\nEOF")]),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"highlight-lines"},[(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("div",{class:"highlight-line"}," "),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br")])],-1),Sa=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Ra=(0,e._)("p",null,"Copy the startup script to system directory.",-1),wa=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/gsad.service /etc/systemd/system/\n")])])],-1),Ea=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Ia=(0,e._)("p",null,"Create the systemd service script for ospd-openvas.",-1),xa=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e._)("span",{class:"token function"},"cat"),(0,e.Uk)(),(0,e._)("span",{class:"token operator"},"<<"),(0,e.Uk)(),(0,e._)("span",{class:"token string"},[(0,e.Uk)("EOF"),(0,e._)("span",{class:"token bash punctuation"},[(0,e.Uk)(),(0,e._)("span",{class:"token operator"},">"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/ospd-openvas.service")]),(0,e.Uk)("\n[Unit]\nDescription=OSPd Wrapper for the OpenVAS Scanner (ospd-openvas)\nDocumentation=man:ospd-openvas(8) man:openvas(8)\nAfter=network.target networking.service redis-server@openvas.service\nWants=redis-server@openvas.service\nConditionKernelCommandLine=!recovery\n\n[Service]\nType=forking\nUser=gvm\nGroup=gvm\nRuntimeDirectory=ospd\nRuntimeDirectoryMode=2775\nPIDFile=/run/ospd/ospd-openvas.pid\nExecStart=/usr/local/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/openvas --socket-mode 0o770\nSuccessExitStatus=SIGKILL\nRestart=always\nRestartSec=60\n\n[Install]\nWantedBy=multi-user.target\nEOF")]),(0,e.Uk)("\n")])])],-1),$a=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Aa=(0,e._)("p",null,"Finally copy the last startup script to your system manager directory.",-1),Da=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"cp"),(0,e.Uk)(),(0,e._)("span",{class:"token variable"},"$BUILD_DIR"),(0,e.Uk)("/ospd-openvas.service /etc/systemd/system/\n")])])],-1),Oa=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Va=(0,e._)("h3",{id:"enable-and-start-services",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#enable-and-start-services","aria-hidden":"true"},"#"),(0,e.Uk)(" Enable and start services")],-1),Na=(0,e._)("p",null,"To enable the created startup scripts reload the system control daemon.",-1),Ga=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl daemon-reload\n")])])],-1),Wa=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Ca=(0,e._)("p",null,"Once you've reloaded the daemon proceed to enable each of the services.",-1),La=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl "),(0,e._)("span",{class:"token builtin class-name"},"enable"),(0,e.Uk)(" ospd-openvas\nserver@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl "),(0,e._)("span",{class:"token builtin class-name"},"enable"),(0,e.Uk)(" gvmd\nserver@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl "),(0,e._)("span",{class:"token builtin class-name"},"enable"),(0,e.Uk)(" gsad\n")])])],-1),Ma=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Ta=(0,e._)("p",null,"Next start each service.",-1),Pa=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl start ospd-openvas\nserver@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl start gvmd\nserver@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl start gsad\n")])])],-1),Ba=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),za={class:"custom-container danger"},Fa=(0,e._)("p",{class:"custom-container-title"},"DANGER",-1),qa=(0,e.Uk)("Remember that even though the initial startup of the services are returned immediately it make take several minutes or even hours for the services to be ready. For more information visit "),Ya={href:"https://greenbone.github.io/docs/gvm-21.04/index.html#starting-services-with-systemd",target:"_blank",rel:"noopener noreferrer"},Ka=(0,e.Uk)("GVM official docs"),Ha=(0,e.Uk)("."),Xa=(0,e._)("p",null,"You can check the current status of each services by running the below commands.",-1),ja=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl status ospd-openvas.service\n")])])],-1),Qa=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),Ja=(0,e.uE)('<div class="language-bash ext-sh"><pre class="language-bash"><code>● ospd-openvas.service - OSPd Wrapper <span class="token keyword">for</span> the OpenVAS Scanner <span class="token punctuation">(</span>ospd-openvas<span class="token punctuation">)</span>\n     Loaded: loaded <span class="token punctuation">(</span>/etc/systemd/system/ospd-openvas.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>\n     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon <span class="token number">2021</span>-10-11 <span class="token number">18</span>:22:39 UTC<span class="token punctuation">;</span> 5min ago\n       Docs: man:ospd-openvas<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>\n             man:openvas<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>\n    Process: <span class="token number">37213</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/openvas -<span class="token operator">&gt;</span>\n   Main PID: <span class="token number">37228</span> <span class="token punctuation">(</span>ospd-openvas<span class="token punctuation">)</span>\n      Tasks: <span class="token number">6</span> <span class="token punctuation">(</span>limit: <span class="token number">2278</span><span class="token punctuation">)</span>\n     Memory: <span class="token number">16</span>.5M\n     CGroup: /system.slice/ospd-openvas.service\n             ├─37228 /usr/bin/python3 /usr/local/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/<span class="token operator">&gt;</span>\n             ├─37230 /usr/bin/python3 /usr/local/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/<span class="token operator">&gt;</span>\n             ├─37297 openvas --update-vt-info\n             └─37300 openvas: Reloaded <span class="token number">43550</span> of <span class="token number">77138</span> NVTs <span class="token punctuation">(</span><span class="token number">56</span>% / ETA: 04:25<span class="token punctuation">)</span>\n\nOct <span class="token number">11</span> <span class="token number">18</span>:22:37 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting OSPd Wrapper <span class="token keyword">for</span> the OpenVAS Scanner <span class="token punctuation">(</span>ospd-openvas<span class="token punctuation">)</span><span class="token punctuation">..</span>.\nOct <span class="token number">11</span> <span class="token number">18</span>:22:39 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started OSPd Wrapper <span class="token keyword">for</span> the OpenVAS Scanner <span class="token punctuation">(</span>ospd-openvas<span class="token punctuation">)</span>.\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div></div>',1),Za=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl status gvmd.service\n")])])],-1),ne=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),se=(0,e.uE)('<p>Synchronizing the SCAP database is usually what takes a lot of time so please be patient and do not restart your server.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>● gvmd.service - Greenbone Vulnerability Manager daemon <span class="token punctuation">(</span>gvmd<span class="token punctuation">)</span>\n     Loaded: loaded <span class="token punctuation">(</span>/etc/systemd/system/gvmd.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>\n     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon <span class="token number">2021</span>-10-11 <span class="token number">18</span>:22:46 UTC<span class="token punctuation">;</span> 8min ago\n       Docs: man:gvmd<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>\n    Process: <span class="token number">37240</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/sbin/gvmd --osp-vt-update<span class="token operator">=</span>/run/ospd/ospd-openvas.sock --listen-group<span class="token operator">=</span>gvm <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">0</span>/SUCCESS<span class="token punctuation">)</span>\n   Main PID: <span class="token number">37251</span> <span class="token punctuation">(</span>gvmd<span class="token punctuation">)</span>\n      Tasks: <span class="token number">3</span> <span class="token punctuation">(</span>limit: <span class="token number">2278</span><span class="token punctuation">)</span>\n     Memory: <span class="token number">1</span>.6G\n     CGroup: /system.slice/gvmd.service\n             ├─37251 gvmd: Waiting <span class="token keyword">for</span> incoming connections\n             ├─37272 gpg-agent --homedir /var/lib/gvm/gvmd/gnupg --use-standard-socket --daemon\n             └─37622 gvmd: Syncing SCAP: Updating CPEs\n\nOct <span class="token number">11</span> <span class="token number">18</span>:22:43 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting Greenbone Vulnerability Manager daemon <span class="token punctuation">(</span>gvmd<span class="token punctuation">)</span><span class="token punctuation">..</span>.\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br></div></div>',2),ae=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@ubuntu:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" systemctl status gsad.service\n")])])],-1),ee=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$\n")])],-1),te=(0,e.uE)('<div class="language-bash ext-sh"><pre class="language-bash"><code>● gsad.service - Greenbone Security Assistant daemon <span class="token punctuation">(</span>gsad<span class="token punctuation">)</span>\n     Loaded: loaded <span class="token punctuation">(</span>/etc/systemd/system/gsad.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>\n     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon <span class="token number">2021</span>-10-11 <span class="token number">18</span>:50:15 UTC<span class="token punctuation">;</span> 1min 11s ago\n       Docs: man:gsad<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>\n             https://www.greenbone.net\n    Process: <span class="token number">38710</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/sbin/gsad --listen<span class="token operator">=</span><span class="token number">192.168</span>.0.1 --port<span class="token operator">=</span><span class="token number">9392</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">0</span>/SUCCESS<span class="token punctuation">)</span>\n   Main PID: <span class="token number">38715</span>\n      Tasks: <span class="token number">8</span> <span class="token punctuation">(</span>limit: <span class="token number">2278</span><span class="token punctuation">)</span>\n     Memory: <span class="token number">2</span>.1M\n     CGroup: /system.slice/gsad.service\n             └─38714 /usr/local/sbin/gsad --listen<span class="token operator">=</span><span class="token number">192.168</span>.0.1 --port<span class="token operator">=</span><span class="token number">9392</span>\n\nOct <span class="token number">11</span> <span class="token number">18</span>:50:12 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting Greenbone Security Assistant daemon <span class="token punctuation">(</span>gsad<span class="token punctuation">)</span><span class="token punctuation">..</span>.\nOct <span class="token number">11</span> <span class="token number">18</span>:50:15 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started Greenbone Security Assistant daemon <span class="token punctuation">(</span>gsad<span class="token punctuation">)</span>.\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br></div></div><p>Login at your localhost e.g. <code>https://192.168.0.1:9392</code> with the username <code>admin</code> and the chosen password.</p>',2),le=["src"],oe=(0,e._)("div",{class:"custom-container warning"},[(0,e._)("p",{class:"custom-container-title"},"WARNING"),(0,e._)("p",null,"This may take a while.")],-1),re=(0,e._)("p",null,[(0,e.Uk)("Once logged in, go to the "),(0,e._)("em",null,"Administration"),(0,e.Uk)(" tab and select "),(0,e._)("em",null,"Feed Status"),(0,e.Uk)(". You'll see that the update is in progress. When the status changed to "),(0,e._)("em",null,"current"),(0,e.Uk)(", go to the dashboard and it will be populated with CVEs by creation time and NVTs by severity class.")],-1),ce=["src"],ie=(0,e._)("p",null,[(0,e.Uk)("You may also confirm the current version, go to the "),(0,e._)("em",null,"Help"),(0,e.Uk)(" tab and select "),(0,e._)("em",null,"About"),(0,e.Uk)(".")],-1),pe=["src"],ue=(0,e._)("p",null,[(0,e.Uk)("To run basic vulnerability scans and get hands-on approach to get started with OpenVAS check the "),(0,e._)("a",{href:"#running-vulnerability-scans"},"Running vulnerability scans"),(0,e.Uk)(" section.")],-1),ke={id:"install-gvm-21-04-atomicorp",tabindex:"-1"},de=(0,e._)("a",{class:"header-anchor",href:"#install-gvm-21-04-atomicorp","aria-hidden":"true"},"#",-1),_e=(0,e.Uk)(" Install GVM 21.04 Atomicorp "),ge=(0,e.Uk)("Atomicorp GVM 21.04 package supports Redhat, Rocky, Centos or Fedora Linux platforms. "),be={href:"https://github.com/Atomicorp/gvm",target:"_blank",rel:"noopener noreferrer"},me=(0,e.Uk)("Atomicorp GVM package"),he=(0,e.Uk)("."),ve=(0,e._)("p",null,"Check if SELinux is enabled.",-1),Ue=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$ sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\n")]),(0,e._)("div",{class:"highlight-lines"},[(0,e._)("br"),(0,e._)("div",{class:"highlight-line"}," "),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("div",{class:"highlight-line"}," ")])],-1),fe=(0,e._)("p",null,"If enabled proceed to disable SELinux by running the command below.",-1),ye=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@rocky:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" setenforce "),(0,e._)("span",{class:"token number"},"0"),(0,e.Uk)("\nserver@rocky:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"nano"),(0,e.Uk)(" /etc/selinux/config\n")])]),(0,e._)("div",{class:"highlight-lines"},[(0,e._)("div",{class:"highlight-line"}," "),(0,e._)("br")])],-1),Se=(0,e.uE)('<p>Update the SELinux configuration file and set SELINUX to disabled.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># This file controls the state of SELinux on the system.</span>\n<span class="token comment"># SELINUX= can take one of these three values:</span>\n<span class="token comment">#     enforcing - SELinux security policy is enforced.</span>\n<span class="token comment">#     permissive - SELinux prints warnings instead of enforcing.</span>\n<span class="token comment">#     disabled - No SELinux policy is loaded.</span>\n<span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>disabled\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Save and reboot the system.</p>',3),Re=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@rocky:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"shutdown"),(0,e.Uk)(" -r now\n")])])],-1),we=(0,e._)("p",null,"Once the system rebooted control that SELinux been disabled.",-1),Ee=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,"server@rocky:~$ sestatus\nSELinux status:                 disabled\n")])],-1),Ie=(0,e._)("p",null,"Continue and download the Atomicorp installer.",-1),xe=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@rocky:~$ "),(0,e._)("span",{class:"token function"},"wget"),(0,e.Uk)(" -q -O - https://updates.atomicorp.com/installers/atomic "),(0,e._)("span",{class:"token operator"},"|"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"sh"),(0,e.Uk)("\n\nFor supported software packages please contact us at: \n\n  sales@atomicorp.com\n\nDo you agree to these terms? "),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("yes/no"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("Default: yes"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(),(0,e._)("span",{class:"token function"},"yes"),(0,e.Uk)("\nEnable repo by default? "),(0,e._)("span",{class:"token punctuation"},"("),(0,e.Uk)("yes/no"),(0,e._)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e._)("span",{class:"token punctuation"},"["),(0,e.Uk)("Default: yes"),(0,e._)("span",{class:"token punctuation"},"]"),(0,e.Uk)(": "),(0,e._)("span",{class:"token function"},"yes"),(0,e.Uk)("\n")])]),(0,e._)("div",{class:"highlight-lines"},[(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("div",{class:"highlight-line"}," "),(0,e._)("div",{class:"highlight-line"}," ")])],-1),$e=(0,e._)("p",null,"Enable PowerTools and install extra packages.",-1),Ae=(0,e._)("div",{class:"custom-container tip"},[(0,e._)("p",{class:"custom-container-title"},"TIP"),(0,e._)("p",null,"Only required for Redhat, Rocky and CentOS.")],-1),De=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@centos:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" yum config-manager --set-enabled PowerTools\nserver@centos:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" yum "),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(" epel-release\n")])])],-1),Oe=(0,e._)("p",null,"Proceed and install GVM.",-1),Ve=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@rocky:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" yum "),(0,e._)("span",{class:"token function"},"install"),(0,e.Uk)(" gvm\n")])])],-1),Ne=(0,e._)("p",null,"Finally run the GVM configuration script to setup GVM (this might take awhile).",-1),Ge=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("server@rocky:~$ "),(0,e._)("span",{class:"token function"},"sudo"),(0,e.Uk)(" gvm-setup\n")])])],-1),We=(0,e._)("p",null,"Once the GVM setup been complete proceed to set the administrator password.",-1),Ce=(0,e._)("div",{class:"custom-container warning"},[(0,e._)("p",{class:"custom-container-title"},"WARNING"),(0,e._)("p",null,"Do not use special characters in the password.")],-1),Le=(0,e._)("div",{class:"language-bash ext-sh"},[(0,e._)("pre",{class:"language-bash"},[(0,e._)("code",null,[(0,e.Uk)("Updating OpenVAS Manager certificates: Complete\n\nGVMD startup: Done\n\nSet the GSAD admin "),(0,e._)("span",{class:"token function"},"users"),(0,e.Uk)(" password.\nThe admin user is used to configure accounts,\nUpdate NVT's manually, and manage roles.\n\nEnter Administrator Password:\nVerify Administrator Password:\n\nSetup complete\n  Log "),(0,e._)("span",{class:"token keyword"},"in"),(0,e.Uk)(" to GSAD at https://localhost\n")])]),(0,e._)("div",{class:"highlight-lines"},[(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("br"),(0,e._)("div",{class:"highlight-line"}," "),(0,e._)("div",{class:"highlight-line"}," "),(0,e._)("br"),(0,e._)("br"),(0,e._)("br")])],-1),Me=(0,e._)("p",null,[(0,e.Uk)("Login at your localhost e.g. "),(0,e._)("code",null,"https://192.168.0.1"),(0,e.Uk)(" with the username "),(0,e._)("code",null,"admin"),(0,e.Uk)(" and the chosen password.")],-1),Te=["src"],Pe=(0,e.uE)('<h2 id="running-vulnerability-scans" tabindex="-1"><a class="header-anchor" href="#running-vulnerability-scans" aria-hidden="true">#</a> Running vulnerability scans</h2><p>There is several approaches on how to configure and run tasks (scans) toward your targets (hosts) in GVM. In this tutorial we will go through how to run the more basic tasks. We will do both unauthenticated scans, where we do not grant GVM SSH access to our target, and authenticated scans to help identify internal server vulnerabilites or misconfigurations.</p><h3 id="unauthenticated-scan" tabindex="-1"><a class="header-anchor" href="#unauthenticated-scan" aria-hidden="true">#</a> Unauthenticated scan</h3><p>Login to the Greenbone Security Assistant (GSA) e.g. <code>https://192.168.0.1</code>. Once logged in we will add our first target. Go the the <em>Configuration</em> menu in the top navigation and select <em>Targets</em>.</p>',4),Be=["src"],ze=(0,e._)("p",null,[(0,e.Uk)("In the top left corner of the "),(0,e._)("em",null,"Targets"),(0,e.Uk)(" view there's a starred document icon, click and select to create a "),(0,e._)("em",null,"New Target"),(0,e.Uk)(". Fill in the name of the target server e.g. "),(0,e._)("em",null,"Ubuntu Client"),(0,e.Uk)(" and its IP address "),(0,e._)("code",null,"192.168.0.2"),(0,e.Uk)(". Leave the rest of the settings in default.")],-1),Fe=["src"],qe=(0,e._)("p",null,[(0,e.Uk)("Next we will create a task for unauthenticated targets (scans without SSH access). Go the "),(0,e._)("em",null,"Scans"),(0,e.Uk)(" in the top menu and select "),(0,e._)("em",null,"Tasks"),(0,e.Uk)(".")],-1),Ye=["src"],Ke=(0,e._)("p",null,[(0,e.Uk)("Click the starred document icon in the top left corner of the "),(0,e._)("em",null,"Tasks"),(0,e.Uk)(" view.")],-1),He=["src"],Xe=(0,e._)("p",null,[(0,e.Uk)("Select a descriptive name for your task e.g. Unauthenticated scan. In the "),(0,e._)("em",null,"Scan Targets"),(0,e.Uk)(" dropdown menu select your target we created before (Ubuntu Client). Leave the default settings and click save.")],-1),je=["src"],Qe=(0,e._)("p",null,[(0,e.Uk)("You will then be redirected back to the "),(0,e._)("em",null,"Tasks"),(0,e.Uk)(" overview and our new task will be listed in the table below the graphs. To start the scan press the start button on the right side of the table.")],-1),Je=["src"],Ze=(0,e._)("h3",{id:"authenticated-scan",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#authenticated-scan","aria-hidden":"true"},"#"),(0,e.Uk)(" Authenticated scan")],-1),nt=(0,e._)("p",null,[(0,e.Uk)("First make sure that you've generated SSH keys for your GVM client user e.g. "),(0,e._)("code",null,"client@ubuntu"),(0,e.Uk)(". Add your public key to the targets authorized keys file. You may have to connect to your target host, through SSH, before running GVM vulnerability scan to add the target host to your clients machine known hosts. Once you've established a secure communication between your client and target, proceed to configure credentials in the Greenbone Security Assistant. Go to "),(0,e._)("em",null,"Configuration"),(0,e.Uk)(" and select "),(0,e._)("em",null,"Credentials"),(0,e.Uk)(".")],-1),st=["src"],at=(0,e._)("p",null,[(0,e.Uk)("Next click the starred document in the top left corner to create your new credentials. Give the credentials a desciptive name with an optional comment. In the dropdown menu "),(0,e._)("em",null,"Type"),(0,e.Uk)(", select "),(0,e._)("em",null,"Username + SSH key"),(0,e.Uk)(" and disallow insecure use and auto-generation. Add the username of the target host user followed by the password and upload the private key (e.g. id_rsa). Click save.")],-1),et=["src"],tt=(0,e._)("p",null,[(0,e.Uk)("Go to the "),(0,e._)("em",null,"Targets"),(0,e.Uk)(" section and either edit your "),(0,e._)("a",{href:"#unauthenticated-scan"},"unauthenticated scan"),(0,e.Uk)(" or create a new target. Set the host IP address and in the dropdown menu, under the "),(0,e._)("em",null,"Credentials for authentication checks"),(0,e.Uk)(", select your newly created SSH credential.")],-1),lt=["src"],ot=(0,e._)("p",null,"Finally create a new task and select the target that we attached our credentials to and leave the default settings.",-1),rt=["src"],ct=(0,e._)("h2",{id:"two-factor-authentication-w-privacyidea",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#two-factor-authentication-w-privacyidea","aria-hidden":"true"},"#"),(0,e.Uk)(" Two-factor authentication w/ privacyIDEA")],-1),it=(0,e.Uk)("To enforce two-factor authentication for Greenbone Security Assistant with privacyIDEA and YubiKey read the "),pt=(0,e.Uk)("Two-factor authentication w/ privacyIDEA and YubiKey"),ut=(0,e.Uk)(" chapter."),kt=(0,e.uE)('<h2 id="scheduled-jobs" tabindex="-1"><a class="header-anchor" href="#scheduled-jobs" aria-hidden="true">#</a> Scheduled jobs</h2><p>To keep the community feed up-to-date, first login as your GVM user.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>server@ubuntu:~$ sudo su - gvm\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Create the file that we will populate with the required commands.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>gvm@ubuntu:~$ touch /opt/gvm/bin/openvas-update\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Make the file executable.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>gvm@ubuntu:~$ chmod a+x /opt/gvm/bin/openvas-update\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Enter the commands that we will run daily.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>gvm@ubuntu:~$ nano /opt/gvm/bin/openvas-update\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/opt/gvm/bin/greenbone-nvt-sync\n/opt/gvm/sbin/greenbone-feed-sync --type GVMD_DATA\n/opt/gvm/sbin/greenbone-feed-sync --type SCAP\n/opt/gvm/sbin/greenbone-feed-sync --type CERT\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Edit the GVM users crontab and add the script we created to check for daily updates.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>gvm@ubuntu:~$ crontab -e\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Edit this file to introduce tasks to be run by cron.</span>\n<span class="token comment">#</span>\n<span class="token comment"># Each task to run has to be defined through a single line</span>\n<span class="token comment"># indicating with different fields when the task will be run</span>\n<span class="token comment"># and what command to run for the task</span>\n<span class="token comment">#</span>\n<span class="token comment"># To define the time you can provide concrete values for</span>\n<span class="token comment"># minute (m), hour (h), day of month (dom), month (mon),</span>\n<span class="token comment"># and day of week (dow) or use &#39;*&#39; in these fields (for &#39;any&#39;).</span>\n<span class="token comment">#</span>\n<span class="token comment"># Notice that tasks will be started based on the cron&#39;s system</span>\n<span class="token comment"># daemon&#39;s notion of time and timezones.</span>\n<span class="token comment">#</span>\n<span class="token comment"># Output of the crontab jobs (including errors) is sent through</span>\n<span class="token comment"># email to the user the crontab file belongs to (unless redirected).</span>\n<span class="token comment">#</span>\n<span class="token comment"># For example, you can run a backup of all your user accounts</span>\n<span class="token comment"># at 5 a.m every week with:</span>\n<span class="token comment"># 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</span>\n<span class="token comment">#</span>\n<span class="token comment"># For more information see the manual pages of crontab(5) and cron(8)</span>\n<span class="token comment">#</span>\n<span class="token comment"># m h  dom mon dow   command</span>\n\n<span class="token number">0</span> <span class="token number">0</span> * * * /opt/gvm/bin/openvas-update\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="troubleshooting" tabindex="-1"><a class="header-anchor" href="#troubleshooting" aria-hidden="true">#</a> Troubleshooting</h2>',14),dt=(0,e.Uk)("If you encounter any issue or having questions regarding Greenbone Vulnerability Manager, I recommend using their helpful "),_t={href:"https://community.greenbone.net/",target:"_blank",rel:"noopener noreferrer"},gt=(0,e.Uk)("community forum"),bt=(0,e.Uk)("."),mt={href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"},ht=(0,e.Uk)("Questions"),vt=(0,e.Uk)(", "),Ut={href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"},ft=(0,e.Uk)("comments"),yt=(0,e.Uk)(", or "),St={href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"},Rt=(0,e.Uk)("problems"),wt=(0,e.Uk)(" regarding this service? Create an issue "),Et={href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"},It=(0,e.Uk)("here"),xt=(0,e.Uk)(" or contact "),$t=(0,e._)("a",{href:"mailto:webmaster@libellux.com"},"webmaster@libellux.com",-1),At=(0,e.Uk)("."),Dt={id:"enterprise-solutions",tabindex:"-1"},Ot=(0,e._)("a",{class:"header-anchor",href:"#enterprise-solutions","aria-hidden":"true"},"#",-1),Vt=(0,e.Uk)(" Enterprise solutions "),Nt=(0,e._)("h3",{id:"the-greenbone-security-manager",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#the-greenbone-security-manager","aria-hidden":"true"},"#"),(0,e.Uk)(" The Greenbone Security Manager")],-1),Gt=(0,e._)("p",null,"The Greenbone Security Manager (GSM) is an appliance for vulnerability scanning and management. It is offered in various performance levels and basically supports an unlimited number of target systems. The actually achievable number depends on the scan pattern and scan targets. For finding the right model for your purpose, we provide reference values for the number of target IP addresses below, assuming a common scenario with a scan every 24 hours.",-1),Wt={href:"https://www.greenbone.net/en/product-comparison/",target:"_blank",rel:"noopener noreferrer"},Ct=(0,e.Uk)("Greenbone Security Manager"),Lt={},Mt=(0,a(3744).Z)(Lt,[["render",function(n,s){const a=(0,e.up)("Badge"),Lt=(0,e.up)("OutboundLink"),Mt=(0,e.up)("CodeGroupItem"),Tt=(0,e.up)("CodeGroup"),Pt=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e._)("h1",t,[l,o,(0,e.Wm)(a,{text:"Rev 6",type:"tip"})]),r,(0,e._)("p",null,[(0,e._)("a",c,[i,(0,e.Wm)(Lt)]),p,(0,e._)("a",u,[k,(0,e.Wm)(Lt)]),d,(0,e._)("a",_,[g,(0,e.Wm)(Lt)]),b,(0,e._)("a",m,[h,(0,e.Wm)(Lt)])]),v,U,(0,e._)("ul",null,[f,(0,e._)("li",null,[y,(0,e._)("a",S,[R,(0,e.Wm)(Lt)]),w]),E]),(0,e._)("p",null,[(0,e._)("a",I,[x,(0,e.Wm)(Lt)])]),$,A,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",D,[O,(0,e.Wm)(Lt)])])]),V,(0,e._)("p",null,[N,(0,e._)("a",G,[W,(0,e.Wm)(Lt)]),C]),L,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[M])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[T])),_:1})])),_:1}),P,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[B])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[z])),_:1})])),_:1}),F,q,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Y])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[K])),_:1})])),_:1}),H,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[X])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[j])),_:1})])),_:1}),Q,J,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Z])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[nn])),_:1})])),_:1}),sn,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[an])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[en])),_:1})])),_:1}),tn,(0,e._)("p",null,[ln,(0,e._)("a",on,[rn,(0,e.Wm)(Lt)]),cn]),(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[pn])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[un])),_:1})])),_:1}),kn,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[dn])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[_n])),_:1})])),_:1}),gn,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[bn])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[mn])),_:1})])),_:1}),hn,(0,e._)("p",null,[vn,(0,e._)("a",Un,[fn,(0,e.Wm)(Lt)]),yn]),(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Sn])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Rn])),_:1})])),_:1}),wn,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[En])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[In])),_:1})])),_:1}),xn,(0,e._)("p",null,[$n,(0,e._)("a",An,[Dn,(0,e.Wm)(Lt)]),On]),(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Vn])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Nn])),_:1})])),_:1}),Gn,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Wn])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Cn])),_:1})])),_:1}),Ln,(0,e._)("p",null,[Mn,(0,e._)("a",Tn,[Pn,(0,e.Wm)(Lt)]),Bn]),(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[zn])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Fn])),_:1})])),_:1}),qn,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Yn])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Kn])),_:1})])),_:1}),Hn,(0,e._)("p",null,[Xn,(0,e._)("a",jn,[Qn,(0,e.Wm)(Lt)]),Jn]),(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Zn])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[ns])),_:1})])),_:1}),ss,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[as])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[es])),_:1})])),_:1}),ts,(0,e._)("p",null,[ls,(0,e._)("a",os,[rs,(0,e.Wm)(Lt)]),cs]),(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[is])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[ps])),_:1})])),_:1}),us,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ks])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[ds])),_:1})])),_:1}),_s,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[gs])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[bs])),_:1})])),_:1}),ms,hs,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[vs])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Us])),_:1})])),_:1}),fs,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ys])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ss])),_:1})])),_:1}),Rs,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ws])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Es])),_:1})])),_:1}),Is,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[xs])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[$s])),_:1})])),_:1}),As,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Ds])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Os])),_:1})])),_:1}),Vs,(0,e._)("p",null,[Ns,(0,e._)("a",Gs,[Ws,(0,e.Wm)(Lt)]),Cs,Ls,Ms]),(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Ts])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ps])),_:1})])),_:1}),Bs,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[zs])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Fs])),_:1})])),_:1}),qs,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Ys])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ks])),_:1})])),_:1}),Hs,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Xs])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[js])),_:1})])),_:1}),Qs,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Js])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Zs])),_:1})])),_:1}),na,sa,aa,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ea])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[ta])),_:1})])),_:1}),la,oa,ra,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ca])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[ia])),_:1})])),_:1}),pa,ua,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ka])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[da])),_:1})])),_:1}),_a,ga,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ba])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[ma])),_:1})])),_:1}),ha,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[va])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ua])),_:1})])),_:1}),fa,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ya])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Sa])),_:1})])),_:1}),Ra,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[wa])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ea])),_:1})])),_:1}),Ia,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[xa])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[$a])),_:1})])),_:1}),Aa,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Da])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Oa])),_:1})])),_:1}),Va,Na,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Ga])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Wa])),_:1})])),_:1}),Ca,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[La])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ma])),_:1})])),_:1}),Ta,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Pa])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ba])),_:1})])),_:1}),(0,e._)("div",za,[Fa,(0,e._)("p",null,[qa,(0,e._)("a",Ya,[Ka,(0,e.Wm)(Lt)]),Ha])]),Xa,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ja])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Qa])),_:1})])),_:1}),Ja,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[Za])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[ne])),_:1})])),_:1}),se,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Ubuntu"},{default:(0,e.w5)((()=>[ae])),_:1}),(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[ee])),_:1})])),_:1}),te,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_login-2.png",alt:"GSA login"},null,8,le),oe,re,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_dashboard.png",alt:"GSA dashboard"},null,8,ce),ie,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_about.png",alt:"GSA about"},null,8,pe),ue,(0,e._)("h2",ke,[de,_e,(0,e.Wm)(a,{text:"non-sponsored",type:"tip"})]),(0,e._)("p",null,[ge,(0,e._)("a",be,[me,(0,e.Wm)(Lt)]),he]),ve,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ue])),_:1})])),_:1}),fe,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[ye])),_:1})])),_:1}),Se,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Re])),_:1})])),_:1}),we,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ee])),_:1})])),_:1}),Ie,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[xe])),_:1})])),_:1}),$e,Ae,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[De])),_:1})])),_:1}),Oe,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ve])),_:1})])),_:1}),Ne,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Ge])),_:1})])),_:1}),We,Ce,(0,e.Wm)(Tt,null,{default:(0,e.w5)((()=>[(0,e.Wm)(Mt,{title:"Rocky"},{default:(0,e.w5)((()=>[Le])),_:1})])),_:1}),Me,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_dashboard.png",alt:"GSA dashboard"},null,8,Te),Pe,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_targets.png",alt:"GSA targets"},null,8,Be),ze,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_target.png",alt:"GSA target"},null,8,Fe),qe,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_tasks.png",alt:"GSA tasks"},null,8,Ye),Ke,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_task.png",alt:"GSA task"},null,8,He),Xe,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_noauth_task.png",alt:"GSA noauth task"},null,8,je),Qe,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_noauth_scan.png",alt:"GSA noauth scan"},null,8,Je),Ze,nt,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_credentials.png",alt:"GSA credentials"},null,8,st),at,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_newcredentials.png",alt:"GSA new credentials"},null,8,et),tt,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_auth_target.png",alt:"GSA auth target"},null,8,lt),ot,(0,e._)("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_auth_task.png",alt:"GSA auth task"},null,8,rt),ct,(0,e._)("p",null,[it,(0,e.Wm)(Pt,{to:"/privacyidea/"},{default:(0,e.w5)((()=>[pt])),_:1}),ut]),kt,(0,e._)("p",null,[dt,(0,e._)("a",_t,[gt,(0,e.Wm)(Lt)]),bt]),(0,e._)("p",null,[(0,e._)("a",mt,[ht,(0,e.Wm)(Lt)]),vt,(0,e._)("a",Ut,[ft,(0,e.Wm)(Lt)]),yt,(0,e._)("a",St,[Rt,(0,e.Wm)(Lt)]),wt,(0,e._)("a",Et,[It,(0,e.Wm)(Lt)]),xt,$t,At]),(0,e._)("h2",Dt,[Ot,Vt,(0,e.Wm)(a,{text:"non-sponsored",type:"tip"})]),Nt,Gt,(0,e._)("p",null,[(0,e._)("a",Wt,[Ct,(0,e.Wm)(Lt)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);